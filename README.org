#+setupfile: ./settings/TANGLE.org
#+include: ./settings/README.org

* early-init.el
:PROPERTIES:
:header-args:emacs-lisp+: :noweb-ref early-init.el :tangle no
:header-args:org+: :tangle no
:END:

The ~noweb-ref~ headers, such as the one below, are adapted from [[https://emacs.stackexchange.com/users/388/melioratus][Melioratus's]] answer [[https://emacs.stackexchange.com/a/38935/31428][here]].
This way, I can maintain some semblance of a literate config.

#+begin_src org
,#+begin_src emacs-lisp :noweb-ref no :tangle (meq/tangle-path)
#+end_src

#+begin_src emacs-lisp :noweb-ref no :tangle (meq/tangle-path)
<<early-init.el>>
#+end_src

#+begin_src org
,#+end_src
#+end_src

Start off by specifying the ~user-emacs-directory~:

#+begin_src emacs-lisp
;;; $EMACSDIR/early-init.el -*- lexical-binding: t; -*-
(defvar user-emacs-directory (file-name-directory (or load-file-name buffer-file-name)))
#+end_src

For some reason ~state~ is undefined:

#+begin_src emacs-lisp
(defvar state nil)
#+end_src

Disable [[https://www.emacswiki.org/emacs/InstallingPackages][~package.el~]] on startup: 

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

Old methods of package management, including [[https://www.emacswiki.org/emacs/InstallingPackages][~package.el~]], [[https://github.com/raxod502/straight.el][~straight.el~]] by [[https://github.com/raxod502][Radon Rosborough]], and [[https://github.com/quelpa/quelpa][~quelpa~]]:

#+begin_src emacs-lisp :noweb-ref no
(load (concat user-emacs-directory "siluam/package-config.el"))
(load (concat user-emacs-directory "siluam/straight-config.el"))
(load (concat user-emacs-directory "siluam/quelpa.el"))
#+end_src

This sets up various system-related variables, all fairly descriptive on their own:

#+begin_src emacs-lisp
(defvar meq/var/windows (member system-type '(windows-nt ms-dos)))
(defvar meq/var/slash (if meq/var/windows "\\" "/"))
(defvar meq/var/phone (ignore-errors (string-match-p (regexp-quote "Android") (shell-command-to-string "uname -a"))))
(defvar meq/var/wsl (ignore-errors (string-match-p (regexp-quote "microsoft-standard-WSL") (shell-command-to-string "uname -a"))))
(defvar meq/var/nixos (ignore-errors (string-match-p (regexp-quote "nixos") (shell-command-to-string "uname -a"))))
#+end_src

Set the borg package directory:

#+begin_src emacs-lisp
(setq borg-drones-directory-prefix (concat "lib" meq/var/slash))
(setq borg-drones-directory (concat user-emacs-directory borg-drones-directory-prefix))
#+end_src

[[https://github.com/emacscollective/borg][We Are Borg.]]
[[./borg.gif]]

#+begin_src emacs-lisp
(defun meq/require-and-load (pkg)
    (add-to-list 'load-path (concat user-emacs-directory "siluam" meq/var/slash pkg) t)
    (require (intern pkg)))
(mapc 'meq/require-and-load '("emacsql" "emacsql-sqlite" "closql"
                              "epkg" "borg"
                              ))
;; (unless (or
;;           meq/var/phone
;;           ;; meq/var/windows
;;           ) (meq/require-and-load "epkg"))
;; (meq/require-and-load "borg")
#+end_src

Make the ~borg~ git command buffer and any potential errors more descriptive:

#+begin_src emacs-lisp
(defun meq/borg--call-git-advice (pkg &rest args)
  (let ((process-connection-type nil)
        (buffer (generate-new-buffer
                 (concat " *Borg Git" (and pkg (concat " " pkg)) "*"))))
    (if (eq (apply #'call-process "git" nil buffer nil args) 0)
        (kill-buffer buffer)
      (with-current-buffer buffer
        (special-mode))
      (pop-to-buffer buffer)
      (error "Borg Git: %s %s:\n\n%s" pkg args (buffer-string)))))
(advice-add #'borg--call-git :override #'meq/borg--call-git-advice)
#+end_src

I know that the packages I'm installing are safe:

#+begin_src emacs-lisp
(advice-add #'borg--maybe-confirm-unsafe-action :override #'ignore)
#+end_src

Always delete the package's git directory and ~submodule add~ it again:

#+begin_src emacs-lisp
(advice-add #'borg--maybe-reuse-gitdir :override #'ignore)
#+end_src

Always absorb foreign git directories:

#+begin_src emacs-lisp
(advice-add #'borg--maybe-absorb-gitdir :override #'ignore)
#+end_src

Always execute the build-steps of a package outlined in the ~.gitmodules~ file:

#+begin_src emacs-lisp
(defun meq/borg-build-advice (clone &optional activate)
  "Build the clone named CLONE.
Interactively, or when optional ACTIVATE is non-nil,
then also activate the clone using `borg-activate'."
  (interactive (list (borg-read-clone "Build drone: ") t))
  (borg--build-noninteractive clone)
  (when activate (borg-activate clone)))
(advice-add #'borg-build :override #'meq/borg-build-advice)
#+end_src

When assimilating packages, return packages which have not been assimilated yet; otherwise, return packages which have:

#+begin_src emacs-lisp
(defun meq/borg-drones-advice (func &rest args)
  (let* ((barg (pop args))
          (assimilating (pop args)))
    (seq-filter #'(lambda (pkg*) (interactive)
      (let* ((pkg (car pkg*))
              (path* (cl-getf (cdr pkg*) 'path))
              (path (cond ((listp path*) (car path*))
                          ((stringp path*) path*)))
              (exists (file-exists-p (borg-worktree pkg)))
              (no-back-slash (not (string-match-p (regexp-quote "\\") pkg)))
              (no-forward-slash (not (string-match-p (regexp-quote "/") pkg)))
              (xane (xor assimilating exists)
                    ;; (or
                    ;;     (and assimilating (not exists))
                    ;;     (and exists (not assimilating)))
                    )
              (same-borg-prefix (string= (string-remove-suffix pkg path)
                                    (string-remove-prefix borg-user-emacs-directory borg-drones-directory)))
              (result (and no-back-slash no-forward-slash xane same-borg-prefix)))
            result))
      (funcall func barg))))
(advice-add #'borg-drones :around #'meq/borg-drones-advice)
#+end_src

Assimilate packages by ~submodule add~ing them with a depth of 1:

#+begin_src emacs-lisp
(defun meq/borg-assimilate-advice (package url &optional partially)
  "Assimilate the package named PACKAGE from URL.
If `epkg' is available, then only read the name of the package
in the minibuffer and use the url stored in the Epkg database.
If `epkg' is unavailable, the package is not in the database, or
with a prefix argument, then also read the url in the minibuffer.
With a negative prefix argument only add the submodule but don't
build and activate the drone."
  (interactive
   (nconc (borg-read-package "Assimilate package: " current-prefix-arg)
          (list (< (prefix-numeric-value current-prefix-arg) 0))))
  (borg--maybe-confirm-unsafe-action "assimilate" package url)
  (message "Assimilating %s..." package)
  (unless (equal (borg-get package "s8472") "true")
      (borg--maybe-reuse-gitdir package)
      (borg--call-git
        package
        "-C" borg-top-level-directory
        "submodule"
        "add"
        "-f"
        "--depth" "1"
        "--name" package
        url
        (or
          (borg-get package "path")
          (concat (string-remove-prefix borg-user-emacs-directory borg-drones-directory) meq/var/slash package)))
      (borg--sort-submodule-sections ".gitmodules")
      (borg--call-git package "add" ".gitmodules")
      (borg--maybe-absorb-gitdir package))
  (unless partially
    (borg-build package)
    (borg-activate package))
  (borg--refresh-magit)
  (message "Assimilating %s...done" package))
(advice-add #'borg-assimilate :override #'meq/borg-assimilate-advice)
#+end_src

Update assimilated packages if necessary:

#+begin_src emacs-lisp
(defvar meq/var/update (member "--update" command-line-args)) (delete "--update" command-line-args)
(when meq/var/update (mapc #'borg-build (mapcar #'car (borg-drones t))))
#+end_src

Avoid stale ~*.elc~ files using [[https://emacs.stackexchange.com/a/186/31428][this answer]], by [[https://emacs.stackexchange.com/users/50/malabarba][Malabarba]]:

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

Set up startup optimization packages, including [[https://github.com/emacscollective/packed][~packed~]], [[https://github.com/emacscollective/auto-compile][~auto-compile~]], [[https://github.com/emacscollective/no-littering][~no-littering~]], and [[https://github.com/emacsmirror/gcmh][~gcmh~]]:

#+begin_src emacs-lisp
(mapc #'(lambda (pkg*) (interactive)
  (let* ((pkg (symbol-name pkg*)))
    (ignore-errors (borg-activate pkg))
    (unless (require pkg* nil t)
        (borg-assimilate pkg (borg-get pkg "url"))))) '(packed auto-compile no-littering gcmh))
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)
(gcmh-mode 1)
#+end_src

Enable ~auto-revert~ modes to automagically update modified files on disk, from [[https://kundeveloper.com/blog/autorevert/][here]]:

#+begin_src emacs-lisp
(global-auto-revert-mode t) (auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil
#+end_src

Don't notify us about auto-reversion, from [[https://stackoverflow.com/a/54369503/10827766][this answer]] by [[https://stackoverflow.com/users/9848932/jdc][jdc]]:

#+begin_src emacs-lisp
      auto-revert-use-notify nil)
#+end_src

We Are ~Org~:

#+begin_src emacs-lisp
(if (file-exists-p (concat user-emacs-directory "lib" meq/var/slash "org"))
  (if (file-exists-p (concat user-emacs-directory "lib" meq/var/slash "org" meq/var/slash "lisp" meq/var/slash "org-loaddefs.el"))
    (borg-activate "org")
    (borg-build "org" t))
  (borg-assimilate "org" (borg-get "org" "url")))
(require 'org-loaddefs)
#+end_src

Create a version of [[https://github.com/emacscollective/borg/blob/master/borg.el#L912][borg's git call]] function to call any shell command:

#+begin_src emacs-lisp
(defun meq/call (program buffer-name &rest args)
  (let ((process-connection-type nil)
        (buffer (generate-new-buffer buffer-name)))
    (if (eq (apply #'call-process program nil buffer nil args) 0)
        (kill-buffer buffer)
      (with-current-buffer buffer
        (special-mode))
      (pop-to-buffer buffer)
      (error "%s: %s:\n\n%s" program args (buffer-string)))))
#+end_src

Then create a shell tangle function based on the above:

#+begin_src emacs-lisp
(defun meq/call-tangle (file) (meq/call (concat user-emacs-directory "settings" meq/var/slash "org-tangle.sh") "*literally-configuring*" file))
#+end_src

Modify [[https://code.orgmode.org/bzg/org-mode/src/master/lisp/org.el#L222][~org-babel-load-file~]] to use the above function instead:

#+begin_src emacs-lisp
(defun meq/org-babel-load-file-advice (file &optional compile)
  "Load Emacs Lisp source code blocks in the Org FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded."
  (interactive "fFile to load: \nP")
  (let ((tangled-file (concat (file-name-sans-extension file) ".el")))
    ;; Tangle only if the Org file is newer than the Elisp file.
    (unless (org-file-newer-than-p
                tangled-file
                (file-attribute-modification-time
                    (file-attributes (file-truename file))))
        (meq/call-tangle file))
    (if compile
        (progn
            (byte-compile-file tangled-file)
            (load tangled-file)
            (message "Compiled and loaded %s" tangled-file))
        (load-file tangled-file)
        (message "Loaded %s" tangled-file))))
(advice-add #'org-babel-load-file :override #'meq/org-babel-load-file-advice)
#+end_src

Then finally create the function to [re]load the primary early-init in this README and load it for the first time:

#+begin_src emacs-lisp
(defun meq/reload-early-init nil (interactive) (org-babel-load-file (concat user-emacs-directory "README.org") t))
(meq/reload-early-init)
#+end_src

* Startup

Remove ~--~ from scripts:

#+begin_src emacs-lisp
(when (string= (car (last command-line-args)) "--") (delete "--" command-line-args))
#+end_src

** Optimizations
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Startup optimizations from [[https://github.com/hlissner][Henrik Lissner's]] [[https://github.com/hlissner/doom-emacs/blob/develop/early-init.el][Doom Emacs' ~early-init.el~]]:

#+begin_quote
Emacs 27.1 introduced early-init.el, which is run before init.el, before
package and UI initialization happens, and before site files are loaded.
#+end_quote

#+begin_quote
A big contributor to startup times is garbage collection. We up the gc
threshold to temporarily prevent it from running, then reset it later by
enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.
#+end_quote

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

And for the ~file-name-handler-alist~:

#+begin_src emacs-lisp
(setq meq/var/file-name-handler-alist file-name-handler-alist)
(unless (or (daemonp) noninteractive)
#+end_src

#+begin_quote
`file-name-handler-alist' is consulted on each `require', `load' and
various path/io functions. You get a minor speed up by unsetting this.
Some warning, however: this could cause problems on builds of Emacs where
its site lisp files aren't byte-compiled and we're forced to load the
*.el.gz files (e.g. on Alpine).
#+end_quote

#+begin_src emacs-lisp
    (setq-default file-name-handler-alist nil)
#+end_src

#+begin_quote
...but restore `file-name-handler-alist' later, because it is needed for
handling encrypted or compressed files, among other things.
#+end_quote

#+begin_src emacs-lisp
    (defun meq/reset-file-handler-alist-h ()
      (setq file-name-handler-alist
#+end_src

#+begin_quote
Merge instead of overwrite because there may have bene changes to
`file-name-handler-alist' since startup we want to preserve.
#+end_quote

#+begin_src emacs-lisp
            (delete-dups (append file-name-handler-alist
                                 meq/var/file-name-handler-alist))))
    (add-hook 'emacs-startup-hook #'meq/reset-file-handler-alist-h 101))
#+end_src

If I ever need it, this will give me the initial directory I was in; the code is adapted from [[https://emacs.stackexchange.com/users/1979/stefan][Stefan's]] answer [[https://emacs.stackexchange.com/a/31662/31428][here]]:

#+begin_src emacs-lisp
(setq meq/var/initial-directory default-directory)
#+end_src

The next few bits are adapted from [[https://www.reddit.com/r/emacs/comments/dppmqj/do_i_even_need_to_leverage_earlyinitel_if_i_have/?utm_source=amp&utm_medium=&utm_content=post_body][here]], with a few quotes from myself and others scattered here and there,
such as this bit [[https://www.reddit.com/r/emacs/comments/41m7x3/why_are_you_changing_gcconsthreshold/cz3t775?utm_source=share&utm_medium=web2x&context=3][about ~gc-cons-percentage~]]:

#+begin_quote
... There's also gc-cons-percentage which performs a gc if the amount of new memory used as a percentage
of the total has increased by a certain amount.
If you set gc-cons-threshold to a large number that effectively puts gc-cons-percentage into the driving seat.
The default gc-cons-threshold is 400000 bytes, not 800000. ...
#+end_quote

#+begin_src emacs-lisp
(defvar meq/var/gc-cons-percentage gc-cons-percentage)

(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-percentage meq/var/gc-cons-percentage)

            (defun meq/gc-on-lose-focus ()
              (unless (frame-focus-state)
                (garbage-collect)))

            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function #'meq/gc-on-lose-focus))))

(setq-default gc-cons-percentage 0.6)
#+end_src

#+begin_src emacs-lisp
(setq-default auto-window-vscroll nil
    frame-inhibit-implied-resize t
    inhibit-compacting-font-caches t)
(fset 'yes-or-no-p 'y-or-n-p)
(fset 'view-hello-file 'ignore)
(fset 'display-startup-echo-area-message 'ignore)

(put 'narrow-to-region 'disabled nil)
(put 'up-case-rgion 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)

(push '(ns-transparent-titlebar . t) default-frame-alist)
(push '(ns-appearance . nil) default-frame-alist)
(push '(internal-border . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars . 0) default-frame-alist)
(push '(left-fringe . 0) default-frame-alist)
(push '(right-fringe . 0) default-frame-alist)
#+end_src

** Libraries
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Byte-compile the library directories and add them to the load-path now; the following bits are adapted from [[https://emacs.stackexchange.com/users/14825/nickd][NickD's]] answer [[https://emacs.stackexchange.com/a/55415/31428][here]],
and [[https://www.emacswiki.org/emacs/LoadPath#h5o-2][from this section of the Emacs Wiki]].

#+begin_src emacs-lisp
(let* ((default-directory (concat user-emacs-directory "siluam")))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

** Native Comp
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

These are two settings I like for ~native compilation~, adapted from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#native-compilation][here]]:

#+begin_quote
Silence compiler warnings as they can be pretty disruptive
#+end_quote

#+begin_src emacs-lisp
(ignore-errors
    (setq native-comp-async-report-warnings-errors nil)
#+end_src

#+begin_quote
Set the right directory to store the native comp cache
#+end_quote

#+begin_src emacs-lisp
    (add-to-list 'native-comp-eln-load-path (meq/ued-local "eln-cache/")))
#+end_src

** We are Borg.
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Assimilate the packages from my ~.gitmodules~ file:

# with the help of [[https://stackoverflow.com/a/28686228/10827766][this]], by [[https://stackoverflow.com/users/596361/mirzhan-irkegulov][Mirzhan Irkegulov]]:

#+begin_src emacs-lisp
(let* ((gitmodules (borg-drones t t))
        (command)

        ;; Adapted From:
        ;; Answer: https://superuser.com/a/927832/1154755
        ;; User: https://superuser.com/users/265996/jackson
        (inhibit-message t))
    (mapc #'(lambda (pkg) (interactive)
                (apply #'borg-assimilate pkg))
        ;; Adapted From:
        ;; Answer: https://stackoverflow.com/a/9366300/10827766
        ;; User: https://stackoverflow.com/users/267442/spec
        (remove nil (mapcar #'(lambda (pkg) (interactive)
            (list (car pkg) (cl-getf (cdr pkg) 'url))) gitmodules))))
#+end_src

Wake up the borg:

#+begin_src emacs-lisp
(setq borg-rewrite-urls-alist '(("git@github.com:" . "https://github.com/")
                                ("git@gitlab.com:" . "https://gitlab.com/")))
(borg-initialize)
#+end_src

/Finally/ activate my function library:

#+begin_src emacs-lisp
(require 'meq)
#+end_src

** Custom
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

As adapted from [[https://emacs.stackexchange.com/users/2731/ebpa][ebpa's]] answer [[https://emacs.stackexchange.com/a/18682/31428][here]]:

#+begin_src emacs-lisp
(setq custom-file (meq/ued "custom.el"))
(meq/cl custom-file)
(setq auto-save-list-file-prefix user-emacs-directory)
#+end_src

** Themes
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(byte-recompile-directory (meq/ued "themes") nil)
(add-to-list 'custom-theme-load-path (meq/ued "themes"))
(setq custom-safe-themes t)
#+end_src

By the way, I get most of my themes from [[themer.dev][https://themer.dev/]].

** Packages
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

*** use-package
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

[[https://github.com/jwiegley/use-package][use-package]] with [[https://github.com/jwiegley][John Wiegley]]:

#+begin_src emacs-lisp
(with-no-warnings
  (setq use-package-verbose t)
  (setq use-package-enable-imenu-support t))
(require 'use-package)
#+end_src

Search the ~command-line-args~ list for the ~--always-demand~ argument and set ~use-package-always-demand~ accordingly,
then delete the argument from the list; also set the variable if Emacs is running as a daemon.

#+begin_src emacs-lisp
(setq use-package-always-demand (or (meq/item-in-cla "--always-demand") (daemonp)))
#+end_src

**** Sometimes defer package loading

Quoted from [[https://github.com/jwiegley/use-package#loading-packages-in-sequence][Use-Package's Loading packages in sequence]]:

#+begin_quote
NOTE: pay attention if you set use-package-always-defer to t, and also use the :after keyword, as you will need to specify how the
declared package is to be loaded: e.g., by some :bind. If you're not using one of the mechanisms that registers autoloads, such as
:bind or :hook, and your package manager does not provide autoloads, it's possible that without adding :defer 2 to those declarations,
your package will never be loaded.
#+end_quote

Quoted from [[https://github.com/jwiegley/use-package#notes-about-lazy-loading][Use-Package's Notes about lazy loading]]:

#+begin_quote
In almost all cases you don't need to manually specify :defer t. This is implied whenever :bind or :mode or :interpreter is used.
Typically, you only need to specify :defer if you know for a fact that some other package will do something to cause your package to
load at the appropriate time, and thus you would like to defer loading even though use-package isn't creating any autoloads for you.
You can override package deferral with the :demand keyword. Thus, even if you use :bind, using :demand will force loading to occur
immediately and not establish an autoload for the bound key.
#+end_quote

Quoted from [[https://github.com/jwiegley/use-package#modes-and-interpreters][Use-Package's Modes and interpreters]]:

#+begin_quote
Similar to :bind, you can use :mode and :interpreter to establish a deferred binding within the auto-mode-alist and interpreter-mode-alist variables.
...
If you aren't using :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, :interpreter, or :hook
(all of which imply :defer; see the docstring for use-package for a brief description of each), you can still defer loading with the :defer keyword...
#+end_quote

Quoted from [[https://github.com/jwiegley/use-package#magic-handlers][Use-Package's Magic handlers]]:

#+begin_quote
Similar to :mode and :interpreter, you can also use :magic and :magic-fallback to cause certain function to be run if the beginning of a file matches
a given regular expression.
...
This registers an autoloaded command for pdf-view-mode, defers loading of pdf-tools, and runs pdf-view-mode if the beginning of a buffer matches the string "%PDF".
#+end_quote

Quoted from [[https://github.com/Kungsgeten/ryo-modal#use-package-keyword][RYO-Modal's Use-package keyword]]:

#+begin_quote
Ryo-modal also provides a use-package keyword: :ryo, which is similar to :bind in that it implies :defer t and create autoloads for the bound commands.
The keyword is followed by one or more key-binding commands, using the same syntax as used by ryo-modal-keys...
#+end_quote

Quoted from [[https://github.com/noctuid/general.el#use-package-keywords][General's Use-package Keywords]]:

#+begin_quote
:general is similar to :bind in that it implies :defer t whenever there are bound commands that can be autoloaded
(e.g. it will not imply :defer t if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound,
use-package will create autoloads for them (though this is usually not necessary).
#+end_quote

Quoted from [[https://github.com/noctuid/general.el#ghook-keyword][General's :ghook Keyword]]:

#+begin_quote
:ghook is intended to be used to add a package’s minor mode enabling function to a user-specified hook, so that when hook is run,
the package will be loaded and the mode enabled. This means that :ghook will usually imply :defer t. While it does not always imply :defer t,
it will add any non-lambda functions to :commands (this is the same behavior as :hook).
Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply :defer t.
#+end_quote

Quoted from [[https://github.com/noctuid/general.el#gfhook-keyword][General's :gfhook Keyword]]:

#+begin_quote
Unlike :ghook, :gfhook never adds functions to :commands and therefore never implies :defer t.
This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides.
The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load.
#+end_quote

Also see [[https://github.com/jwiegley/use-package/issues/738#issuecomment-447631609][this comment]].

Note that I assume that [[https://github.com/jwiegley/use-package#use-package-chords][chords]] also defer and create autoloads.

And in my experience... Not a good idea; much too confusing. Use [[https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/][the arguments here]] to decide whether to use this or ~:defer <n>~ instead.

#+begin_src emacs-lisp
(setq use-package-always-defer (meq/item-in-cla "--always-defer"))
#+end_src

**** extras

This sets up [[https://github.com/conao3/leaf.el][leaf.el]] by [[https://github.com/conao3][Naoya Yamashita]]:

#+begin_src emacs-lisp
(use-package leaf :demand t
    :init (defmacro meq/leaf (&rest args) `(leaf ,@args :require ,(cl-getf args :require t)))
    :config (use-package leaf-keywords :demand t))
#+end_src

And then [[https://github.com/shadowrylander/use-package-extras][use-package-extras]] by yours truely:

#+begin_src emacs-lisp
(use-package use-package-extras :demand t
    :config (meq/up use-package-ensure-system-package))
#+end_src

*** hydra
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

This sets up [[https://github.com/abo-abo/hydra][hydra]] by [[https://github.com/abo-abo][Oleh Krehel]], as well as its ~use-package~ keywords:

#+begin_src emacs-lisp
(meq/up hydra
    :custom (hydra-hint-display-type 'lv)
    :bind (:map hydra-base-map ("~" . hydra--universal-argument))
#+end_src

This bit sets up the following:
- [[https://github.com/shadowrylander/janus][janus]] by yours truely
- [[https://gitlab.com/to1ne/use-package-hydra][use-package-hydra]] by [[https://gitlab.com/to1ne][to1ne]]
- [[https://github.com/shadowrylander/use-package-deino][use-package-deino]] by yours truely
- [[https://github.com/shadowrylander/deino][deino]], forked from
[[https://github.com/abo-abo/hydra][hydra]] by [[https://github.com/abo-abo][Oleh Krehel]]

#+begin_src emacs-lisp
    :use-package-preconfig (janus) (use-package-hydra)
    :use-package-postconfig (use-package-deino) (deino :custom (deino-hint-display-type 'lv)))
#+end_src

*** alloy
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Here is the configuration for [[https://github.com/shadowrylander/alloy][alloy]], forked from [[https://github.com/noctuid/general.el][general.el]] by [[https://github.com/noctuid][Fox Kiester]]:

#+begin_src emacs-lisp
(meq/up alloy
#+end_src

This sets up the following:
- [[https://github.com/shadowrylander/lode][lode]] by yours truely! :D
- [[https://github.com/shadowrylander/prime][prime]] by yours truely! :D
- [[https://github.com/lewang/command-log-mode][command-log-mode]] by [[https://github.com/lewang][Le Wang]]
- [[https://github.com/waymondo/use-package-chords][use-package-chords]] by [[https://github.com/waymondo][justin talbott]]

#+begin_src emacs-lisp
    :use-package-preconfig (command-log-mode)
        ;; Important: https://github.com/noctuid/general.el/issues/53#issuecomment-307262154
        (use-package-chords)
#+end_src

I don't like having to unbind keys before reassigning them:

#+begin_src emacs-lisp
    :config (alloy-auto-unbind-keys)
#+end_src

This binds some fundamental keys to the following keymaps:

#+begin_src emacs-lisp :tangle no
(defvar demon-run '(global override
    aiern-insert-state-map
    aiern-normal-state-map
    aiern-god-state-map
    evil-insert-state-map
    evil-normal-state-map
    evil-god-state-map))
#+end_src

#+begin_src emacs-lisp
        (alloy-def :keymaps demon-run
            ;; Adapted From:
            ;; Answer: https://stackoverflow.com/a/4557027/10827766
            ;; User: https://stackoverflow.com/users/387076/gilles-so-stop-being-evil
            "\eOA" [up]
            "\e[A" [up]
            "\eOB" [down]
            "\e[B" [down]
            "\eOD" [left]
            "\e[D" [left]
            "\eOC" [right]
            "\e[C" [right]
            "M-x" 'meq/M-x
            (alloy-chord "  ") 'universal-argument)
#+end_src

And finally, this allows ~alloy~ to assume ~kbd~ is being used, or in this case, [[https://www.emacswiki.org/emacs/naked.el][naked]]:

#+begin_src emacs-lisp
    :custom (alloy-implicit-naked t))
#+end_src

*** uru
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

This sets up my package [[https://github.com/shadowrylander/uru][uru]], which activates ~deinos~ based on the current major-mode, as mentioned in [[https://codeberg.org/dr.ops/medusa/src/branch/main/medusa.org#headline-4][magic medusa hydra]], by [[https://codeberg.org/dr.ops][Andy Drop]]:

#+begin_src emacs-lisp
(meq/up uru :demon ((alloy-chord "uu") 'uru (alloy-chord "ii") 'minoru)
    :config (with-eval-after-load 'prime (prime "u u" uru "uru") (prime "u m" minoru "minoru")))
#+end_src

*** which-key
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

The incredible [[https://github.com/justbur/emacs-which-key][emacs-which-key]] by the incredible [[https://github.com/justbur][Justin Burkett]]:

#+begin_src emacs-lisp
(meq/up which-key :deino (deino/which-key (:color blue :columns 4) "w"
        ("`" nil "cancel")
        ("a" cosmoem-any-popup-showing-p "any popup showing")
        ("h" meq/which-key--hide-popup "hide-popup")
        ("s" meq/which-key--show-popup "show-popup")
        ("r" meq/which-key--refresh-popup "refresh-popup")
        ("t" meq/toggle-which-key "toggle")
        ("l" meq/which-key-show-top-level "meq/toplevel")
        ("L" which-key-show-top-level "toplevel"))
    :gsetq
        (which-key-enable-extended-define-key t)
        (which-key-idle-delay 0.1)
        (which-key-idle-secondary-delay nil)
        (which-key-allow-evil-operators t)

        ;; NOTE: This will cause the which-key maps for the operator states to show up,
        ;; breaking functionality such as `d 13 <arrow-down>', etc.
        ;; (which-key-show-operator-state-maps t)

        ;; TODO: Choose a fun one!
        (which-key-separator " × ")
        ;; (which-key-separator " |-> ")

        (which-key-popup-type 'side-window)
        (which-key-side-window-location '(right bottom left top))

        ;; If this percentage is too small, the keybindings frame will appear at the bottom
        (which-key-side-window-max-width 0.5)

        (which-key-side-window-max-height 0.25))
#+end_src

*** cosmoem
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

[[https://bulbapedia.bulbagarden.net/wiki/Nebby][Nebby]]
[[./nebby.webp]]

Meet the [[https://gitlab.com/shadowrylander/cosmoem][cosmoem]] named [[https://bulbapedia.bulbagarden.net/wiki/Nebby][Nebby]], forked from [[https://gitlab.com/jjzmajic/hercules.el][hercules.el]] by [[https://gitlab.com/jjzmajic][jjzmajic]]:

#+begin_src emacs-lisp
(meq/up cosmoem
#+end_src

#+begin_src emacs-lisp
    :config (with-eval-after-load 'prime
                (prime ", m" map-of-infinity/body "map-of-infinity")
                (meq/which-key-change-ryo "," "damascus"))
#+end_src

This ~deino~ leads to a bunch of other useful ~deinos~, as well as a few useful functions:

#+begin_src emacs-lisp
    :deino (map-of-infinity nil ", m"
        ("`" nil "cancel")
        ("w" deino/which-key/body "which-key")
        ("h" deino/cosmoem/body "cosmoem")
        ("d" meq/disable-all-modal-modes "disable all modal modes" :color blue)
        ("t" toggles/body "toggles")
        ("k" all-keymaps/body "all keymaps"))
#+end_src

The ~deino~ for this package:

#+begin_src emacs-lisp
        (deino/cosmoem (:color blue) ", c"
            ("`" nil "cancel")
            ("h" cosmoem-hide-all-modal-modes "hide all modal modes"))
#+end_src

A ~deino~ for all my modal-mode toggles:

#+begin_src emacs-lisp
        (toggles (:color blue) ", t" ("`" nil "cancel"))
#+end_src

A ~deino~ for all my modal-mode keymaps:

#+begin_src emacs-lisp
        (all-keymaps (:color blue) ", k" ("`" nil "cancel")))
#+end_src

*** sorrow
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Finally, [[https://github.com/shadowrylander/sorrow][sorrow]], forked from [[https://github.com/Kungsgeten/ryo-modal][ryo-modal]] by [[https://github.com/Kungsgeten][Erik Sjöstrand]]:

#+begin_src emacs-lisp
(meq/up sorrow :demon ((alloy-chord "kk") 'meq/sorrow-execute-with-current-bindings)
    :config (with-eval-after-load 'prime (primer+ "t" "toggles"))
            ;; From: https://github.com/shadowrylander/sorrow#which-key-integration
            (push '((nil . "sorrow:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

*** exec-path-from-shell
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Unless I'm on Windows or a DOS-based OS, I'll need to make sure every executable available on my ~$PATH~ can be found by Emacs as well, using
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] by [[https://github.com/purcell][Steve Purcell]]:

#+begin_src emacs-lisp
(unless (meq/windows-p)
    (meq/up exec-path-from-shell
        :gsetq
            (exec-path-from-shell-check-startup-files nil)
            (exec-path-from-shell-variables '("PATH" "MANPATH" "CACHE_HOME" "FPATH" "PYENV_ROOT"))
            (exec-path-from-shell-arguments '("-l"))
        :config
            (exec-path-from-shell-initialize)))
#+end_src

*** undo-fu
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up [[https://github.com/emacsmirror/undo-fu][undo-fu]] and [[https://github.com/emacsmirror/undo-fu-session][undo-fu-session]]:

#+begin_src emacs-lisp
(meq/up undo-fu
    :demon ((alloy-chord "ui") 'deino-undo/body)
    :deino (deino-undo nil "u"
            ("u" undo-fu-only-undo "undo")
            ("r" undo-fu-only-redo "redo")
            ("R" undo-fu-only-redo-all "redo all"))
    :upnsd-postconfig
        (undo-fu-session
            :gsetq
              (undo-fu-session-directory (meq/ued-local "undo-fu-session"))
              (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
            :hook (after-init . global-undo-fu-session-mode)))
#+end_src

*** lode
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up [[https://github.com/shadowrylander/lode][lode]] by yours truely:

#+begin_src emacs-lisp
(meq/up lode)
#+end_src

*** meta
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up [[https://github.com/shadowrylander/lode][meta]] by yours truely:

#+begin_src emacs-lisp
(meq/up meta)
#+end_src

*** prime
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up [[https://github.com/shadowrylander/lode][prime]] by yours truely:

#+begin_src emacs-lisp
(meq/up prime)
#+end_src

*** aiern
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

[[https://github.com/shadowrylander/aiern][aiern]] is my version of [[https://github.com/emacs-evil/evil][evil]]; this first bit of config will enable ~aiern~ on initialization and add it to the list of ignored modal-modes,
such that it isn't disabled by ~meq/disable-all-modal-modes~:

#+begin_src emacs-lisp
(use-package aiern
    :gsetq (aiern-undo-system 'undo-fu)
    :hook (after-init . (lambda nil (interactive)
        (aiern-mode 1)
        (push 'aiern-mode meq/var/ignored-modal-modes)
        (push "aiern" meq/var/ignored-modal-prefixes)))
#+end_src

Both ~evil~ and ~aiern~ require [[https://github.com/justbur/emacs-bind-map][emacs-bind-map]], by [[https://github.com/justbur][Justin Burkett]]:

#+begin_src emacs-lisp
    :use-package-preconfig (bind-map)
#+end_src

More aiern, courtesy of [[https://github.com/shadowrylander/aiern-aiernhide-state][this]], [[https://github.com/mohsenil85/evil-evilified-state][this]], and [[https://github.com/syl20bnr/spacemacs][this]]:

#+begin_src emacs-lisp
    :use-package-postconfig (aiern-aiernhide-state)
#+end_src

The ~:meta-aiern~ keyword, from my very own [[https://github.com/shadowrylander/meta][meta]] package, creates a hydra out of the keymaps passed to it,
in this case being ~aiern-normal-state-map~ and ~aiern-insert-state-map~:

#+begin_src emacs-lisp
    :meta-aiern (aiern-normal-state-map) (aiern-insert-state-map)
#+end_src

#+begin_src emacs-lisp
    :demon
        ((alloy-chord "jj") 'meq/aiern-execute-with-current-bindings)
        ;; ((alloy-chord "") 'meq/toggle-aiern-ex-cosmoem)

        ;; TODO
        ;; ((alloy-chord "''") 'aiern-ex)
    :config
        ;; TODO: How do I create a keymap `aiern-ex-keymap' out of the `aiern-ex-commands' alist?

        ;; (cosmoem-def :show-funs #'meq/aiern-ex-cosmoem-show
        ;;     :hide-funs #'meq/aiern-ex-cosmoem-hide
        ;;     :toggle-funs #'meq/aiern-ex-cosmoem-toggle
        ;;     :keymap 'aiern-ex-keymap
        ;;     ;; :transient t
        ;; )

        ;; (defun meq/aiern-ex-cosmoem-toggle nil (interactive))
        ;; (defun meq/aiern-ex-show-top-level nil (interactive)
        ;;     (meq/which-key-show-top-level 'aiern-ex-keymap))

        ;; (defun meq/toggle-aiern-ex (ua) (interactive "p")
        ;;     (if (= ua 4)
        ;;         (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap nil t)
        ;;         (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap)))
        ;; (defun meq/toggle-aiern-ex-cosmoem (ua) (interactive "p")
        ;;     (if (= ua 4)
        ;;         (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap t t)
        ;;         (funcall 'meq/toggle-inner 'aiern-mode "aiern-ex" (meq/fbatp aiern-mode) 'aiern-ex-keymap t)))
#+end_src

And here are the ~aiern~ bindings set in the ~sorrow~ modal-mode:

#+begin_src emacs-lisp
    :sorrow ("l" :deino
                '(aiern-exits (:color blue) "e"
                    ;; From: https://github.com/emacs-evil/evil/blob/master/evil-maps.el#L449
                    "A deino for getting the fuck outta' here!"
                    ("`" nil "cancel")
                    ("l" aiern-save-and-quit ":wq")
                    ("p" aiern-quit ":q")
                    ("o" aiern-write ":w")
                    ("O" aiern-write-all ":wa")
                    ;; ("q" (funcall (alloy-simulate-key ":q! <RET>")) ":q!"))
                    ("q" (aiern-quit t) ":q!"))
                :name "aiern exits"))
#+end_src

*** all-the-icons
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

I use [[https://connary.com/cartograph.html][Cartograph]] by [[https://connary.com/index.html][Connary Fagen, Inc.]], but I got it cheaper [[https://www.fontspring.com/fonts/connary-fagen-type-design/cartograph-cf][here]]; the second site often has sales on fonts.

#+begin_src emacs-lisp
(meq/up all-the-icons :config
    (ignore-errors
        (set-face-attribute 'default nil :font "Cartograph CF Extra Bold-12")
        (set-face-attribute 'mode-line nil :font "Cartograph CF Extra Bold-12")
        (set-face-attribute 'mode-line-inactive nil :font "Cartograph CF Extra Bold-12")))
#+end_src

*** buffer
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

This binds ~ctrl-tab~ and ~ctrl-shift-tab~ to buffer-cycling motions:

#+begin_src emacs-lisp
(alloy-def :keymaps demon-run "C-tab" 'next-buffer "C-<iso-lefttab>" 'previous-buffer)
#+end_src

And this is mostly adapted from [[https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/][here]]:

#+begin_src emacs-lisp
(sorrow-key "b" :deino '(deino-buffer (:color red :columns 3) "b"
  "
                Buffers :
  "
  ("`" nil "cancel")
  ("<right>" next-buffer "next")
  ("n" next-buffer "next")
  ("b" ivy-switch-buffer "switch" :color blue)
  ("B" ibuffer "ibuffer" :color blue)
  ("<left>" previous-buffer "prev")
  ("p" previous-buffer "prev")
  ("C-b" buffer-menu "buffer menu" :color blue)
  ("N" evil-buffer-new "new" :color blue)
  ("d" kill-this-buffer "delete")
  ;; don't come back to previous buffer after delete
  ("D" (progn (kill-this-buffer) (next-buffer)) "Delete")
  ("S" save-buffer "save")
  ("s" deino-window/body "window" :color blue)))
#+end_src

*** ivy
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

From the [[https://github.com/abo-abo/swiper][swiper]] package by [[https://github.com/abo-abo][Oleh Krehel]]:

#+begin_src emacs-lisp
(meq/up ivy :sorrow ("x" :deino '(deino-execute (:color blue) "x" "A deino for launching stuff!"
        ("`" nil "cancel")
        ("e" execute-extended-command "M-x")) :name "execute order 65")
    :use-package-preconfig (smex)
    :gsetq (ivy-use-virtual-buffers t))
#+end_src

*** counsel
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

From the [[https://github.com/abo-abo/swiper][swiper]] package by [[https://github.com/abo-abo][Oleh Krehel]]:

#+begin_src emacs-lisp
(meq/up counsel
    :use-package-postconfig (prescient) (ivy-prescient)
    :hook (after-init . (lambda nil (interactive)
                            (ivy-mode 1)
                            (counsel-mode 1)
                            (ivy-prescient-mode 1)
                            (prescient-persist-mode 1)))
    :deino+ (deino-execute nil ("c" counsel-M-x "counsel"))

    ;; Adapted From: https://www.reddit.com/r/emacs/comments/7o1sjq/exwm_rofidmenu_replacement_for_starting/dt0lvkm?utm_source=share&utm_medium=web2x&context=3
    :config (push (concat (getenv "HOME") "/.local/share/applications/") counsel-linux-apps-directories)
    :config/defun* (meq/counsel-linux-app-format-function (name comment exec)
                        "Default Linux application name formatter.
                    NAME is the name of the application, COMMENT its comment and EXEC
                    the command to launch it."
                        (format "% -45s %s"
                            (propertize name 'face 'font-lock-builtin-face)
                            (or comment "")))
   :gsetq (counsel-linux-app-format-function #'meq/counsel-linux-app-format-function))
#+end_src

*** damascus
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up the base of this config, including the [[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]] package:

#+begin_src emacs-lisp
(meq/upnsd damascus :use-package-postconfig (rainbow-mode :config (rainbow-mode 1)) (help-fns+)
#+end_src

These are keys primarily accessible for me on Android:

#+begin_src emacs-lisp
    :alloy (:keymaps demon-run
              "¡" 'ignore "¹" 'ignore "½" 'ignore "⅓" 'ignore "¼" 'ignore "⅛" 'ignore "²" 'ignore "⅜" 'ignore
              "¾" 'ignore "³" 'ignore "⁴" 'ignore "⅚" 'ignore "⁵" 'ignore "⅝" 'ignore "⁶" 'ignore "⅞" 'ignore
              "⁷" 'ignore "⁸" 'ignore "⁹" 'ignore "∅" 'ignore "ⁿ" 'ignore "⁰" 'ignore "·" 'ignore "—" 'ignore
              "∞" 'ignore "≠" 'ignore "≈" 'ignore "ê" 'ignore "é" 'ignore "è" 'ignore "ë" 'ignore "ē" 'ignore
              "ū" 'ignore "ü" 'ignore "ú" 'ignore "û" 'ignore "ù" 'ignore "ì" 'evil-ex "ï" 'ignore "í" 'aiern-ex
              "î" 'ignore "ī" 'ignore "ō" 'ignore "œ" 'ignore "ø" 'ignore "õ" 'ignore "ö" 'ignore "ó" 'ignore
              "ô" 'ignore "ò" 'ignore "à" 'ignore "á" 'ignore "â" 'ignore "ä" 'ignore "æ" 'ignore "ã" 'ignore
              "å" 'ignore "ā" 'ignore "ß" 'ignore "ç" 'ignore "ñ" 'ignore "¿" 'ignore
          :keymaps 'universal-argument-map (alloy-chord "  ") 'universal-argument-more
          :keymaps '(override aiern-insert-state-map evil-insert-state-map)
            (naked "RET") 'newline-and-indent
            (alloy-chord ";'") 'meq/end-of-line-and-indented-new-line)
#+end_src

This hook and function combo would allow me to save files without query, taken from [[https://emacs.stackexchange.com/a/51829][this answer]] by [[https://emacs.stackexchange.com/users/2370/tobias][Tobias]]:

#+begin_src emacs-lisp :tangle no
    :config/defun*
        (meq/set-buffer-save-without-query nil
            "Set `buffer-save-without-query' to t."
            (unless (variable-binding-locus 'buffer-save-without-query)
                (setq buffer-save-without-query t)))
    :hook (find-file . meq/set-buffer-save-without-query)
#+end_src

Load the latest help package, and set a few self-describing variables:

#+begin_src emacs-lisp
    :load-siluam-file-postconfig ("help+20")
    :gsetq
        (indent-tabs-mode nil
            confirm-kill-emacs nil
            echo-keystrokes .1
            column-number-mode t
            size-indicator-mode t
            user-full-name "Jeet Ray"
            user-mail-address "aiern@protonmail.com"
            vc-follow-symlinks t)
#+end_src

Do not show byte-compiler warnings, from [[https://emacs.stackexchange.com/a/19507][this answer]] by [[https://emacs.stackexchange.com/users/50/malabarba][Malabarba]]:

#+begin_src emacs-lisp
        (byte-compile-warnings nil)
#+end_src

This would set the ~initial-major-mode~, from [[https://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/][here]]:

#+begin_src emacs-lisp :tangle no
        (initial-major-mode 'org-mode)
#+end_src

#+begin_src emacs-lisp
    :init
        ;; This determines the style of line numbers in effect. If set to `nil', line
        ;; numbers are disabled. For relative line numbers, set this to `relative'.
        ;; Adapted From: https://www.reddit.com/r/emacs/comments/8fz6x2/relative_number_with_line_folding/dy7lmh7?utm_source=share&utm_medium=web2x&context=3
        ;; (display-line-numbers-mode t)
        (setq display-line-numbers-type 'relative)
#+end_src

#+begin_src emacs-lisp
        ;; Adapted From:
        ;; Answer: https://stackoverflow.com/a/50716229/10827766
        ;; User: https://stackoverflow.com/users/1482346/muro
        (global-display-line-numbers-mode t)
#+end_src

The foloowing few pieces are adapted from [[https://unix.stackexchange.com/users/72170/ole][Ole's]] answer [[https://unix.stackexchange.com/a/152151][here]], with his comments quoted as well:

#+begin_quote
Makes *scratch* empty.
#+end_quote

#+begin_src emacs-lisp
        (setq initial-scratch-message "")
#+end_src

#+begin_quote
Removes *scratch* from buffer after the mode has been set.
#+end_quote

#+begin_src emacs-lisp
        (defun meq/remove-scratch-buffer nil (interactive)
            (when (get-buffer "*scratch*") (kill-buffer "*scratch*")))
        (add-hook 'after-change-major-mode-hook 'meq/remove-scratch-buffer)
#+end_src

Not using this bit:

#+begin_quote
Removes *messages* from the buffer.
#+end_quote

#+begin_src emacs-lisp :tangle no
        (setq-default message-log-max nil)
        (when (get-buffer "*Messages*") (kill-buffer "*Messages*"))
#+end_src

#+begin_quote
Removes *Completions* from buffer after you've opened a file.
#+end_quote

#+begin_src emacs-lisp
        (add-hook 'minibuffer-exit-hook
            '(lambda nil
                (let ((buffer "*Completions*"))
                (and (get-buffer buffer)
                        (kill-buffer buffer)))))
#+end_src

#+begin_quote
Don't show *Buffer list* when opening multiple files at the same time.
#+end_quote

#+begin_src emacs-lisp
        (setq inhibit-startup-buffer-menu t)
#+end_src

#+begin_quote
Show only one active window when opening multiple files at the same time.
#+end_quote

#+begin_src emacs-lisp
        (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

Not using this piece either:

#+begin_quote
The following avoids being ask to allow the file local setting of `buffer-save-without-query'.
IMHO it is not a big risk: The malicious code that must not be saved should never be allowed to enter Emacs in the first place.
#+end_quote

#+begin_src emacs-lisp :tangle no
        (put 'buffer-save-without-query 'safe-local-variable #'booleanp)
#+end_src

And finally, make emacs fullscreen, from [[https://emacs.stackexchange.com/users/253/dan][Dan's]] answer [[https://emacs.stackexchange.com/a/3017/31428][here]]:

#+begin_src emacs-lisp
        (add-to-list 'default-frame-alist '(fullscreen . fullboth)))
#+end_src

*** dired-sidebar
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Set up [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] and its [[https://github.com/jojojames/dired-sidebar][sidebar]], by [[https://github.com/jojojames][James]]:

#+begin_src emacs-lisp
(meq/up dired-sidebar :demon ((alloy-chord "\\\\") 'meq/backslash-toggle)
#+end_src

For some reason, on terminal interfaces, the arrow keys in ~dired~ tried to change ownership of file;
this was resolved using the following bit, adapted from [[https://www.reddit.com/r/emacs/comments/pce8f4/dired_ellipses_in_square_brackets_before_file/hakuehb/?utm_medium=android_app&utm_source=share&context=3][here]]:

#+begin_src emacs-lisp
    :upnsd-preconfig (dired+ :gsetq (diredp-bind-problematic-terminal-keys (display-graphic-p)))
#+end_src

Since ~dired-details~ is already implemented in ~dired~ from Emacs version 24.4, we'll enable it only for prior versions:

#+begin_src emacs-lisp
        (dired-details :if (version< emacs-version "24.4"))
        (dired-details+ :if (version< emacs-version "24.4"))
#+end_src

I don't quite like the ~dired-sidebar~ open all the time, so I close it on opening a file from it;
also, no hidden details hint, courtesy of [[https://www.emacswiki.org/emacs/DiredDetails#h5o-1][the Emacs wiki]]:

#+begin_src emacs-lisp
    :gsetq (dired-sidebar-close-sidebar-on-file-open t)
        (dired-details-hidden-string "")
#+end_src

When in the ~dired~ major mode or derived major modes, [[https://github.com/shadowrylander/uru][uru]] will allow me to quickly create, and optionally open,
Zettelkasten files for my novel and documentation:

#+begin_src emacs-lisp
    :uru (dired-mode t deino-dired-mode (:color blue) "d d"
            ("`" nil "cancel")
            ("f" (meq/dired-create-and-open-fell-markdown) "create & edit fell file")
            ("d" (meq/dired-create-and-open-doc-markdown) "create & edit doc file")
            ("F" (meq/dired-create-fell-markdown) "create fell file" :color red)
            ("D" (meq/dired-create-doc-markdown) "create doc file" :color red)))
#+end_src

*** doom-aiern-modeline
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

This sets up [[https://github.com/shadowrylander/doom-aiern-modeline][my fork]] of [[https://github.com/seagle0128/doom-modeline][doom-modeline]] by [[https://github.com/seagle0128][Vincent Zhang]] upon initialization:

#+begin_src emacs-lisp
(use-package doom-aiern-modeline
    :hook (after-init . doom-aiern-modeline-mode)
#+end_src

Then this sets up [[https://github.com/emacsorphanage/god-mode][god-mode]], [[https://github.com/gridaphobe/evil-god-state][evil-god-state]] by [[https://github.com/gridaphobe][Eric Seidel]], and my fork of it [[https://github.com/shadowrylander/aiern-god-state][aiern-god-state]]

#+begin_src emacs-lisp
    :use-package-preconfig (shrink-path)
            (god-mode :demon ((alloy-chord "hh") 'meq/god-execute-with-current-bindings)
                :upnsd-postconfig (aiern-god-state) (evil-god-state)
                :config (which-key-enable-god-mode-support))
#+end_src

Most of the following is adapted from [[https://github.com/seagle0128/doom-aiern-modeline#customize][here]]:

#+begin_src emacs-lisp
    :gsetq
        ;; How tall the mode-line should be. It's only respected in GUI.
        ;; If the actual char height is larger, it respects the actual height.
        (doom-aiern-modeline-height 25)

        ;; How wide the mode-line bar should be. It's only respected in GUI.
        (doom-aiern-modeline-bar-width 3)

        ;; The limit of the window width.
        ;; If `window-width' is smaller than the limit, some information won't be displayed.
        (doom-aiern-modeline-window-width-limit fill-column)

        ;; How to detect the project root.
        ;; The default priority of detection is `ffip' > `projectile' > `project'.
        ;; nil means to use `default-directory'.
        ;; The project management packages have some issues on detecting project root.
        ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
        ;; to hanle sub-projects.
        ;; You can specify one if you encounter the issue.
        (doom-aiern-modeline-project-detection 'project)

        ;; Determines the style used by `doom-aiern-modeline-buffer-file-name'.
        ;;
        ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
        ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
        ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
        ;;   truncate-with-project => emacs/l/comint.el
        ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
        ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
        ;;   truncate-all => ~/P/F/e/l/comint.el
        ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   relative-from-project => emacs/lisp/comint.el
        ;;   relative-to-project => lisp/comint.el
        ;;   file-name => comint.el
        ;;   buffer-name => comint.el<2> (uniquify buffer name)
        ;;
        ;; If you are experiencing the laggy issue, especially while editing remote files
        ;; with tramp, please try `file-name' style.
        ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
        (doom-aiern-modeline-buffer-file-name-style 'auto)

        ;; Whether display icons in the mode-line.
        ;; While using the server mode in GUI, should set the value explicitly.
        (doom-aiern-modeline-icon (display-graphic-p))

        ;; Whether display the icon for `major-mode'. It respects `doom-aiern-modeline-icon'.
        (doom-aiern-modeline-major-mode-icon t)

        ;; Whether display the colorful icon for `major-mode'.
        ;; It respects `all-the-icons-color-icons'.
        (doom-aiern-modeline-major-mode-color-icon t)

        ;; Whether display the icon for the buffer state. It respects `doom-aiern-modeline-icon'.
        (doom-aiern-modeline-buffer-state-icon t)

        ;; Whether display the modification icon for the buffer.
        ;; It respects `doom-aiern-modeline-icon' and `doom-aiern-modeline-buffer-state-icon'.
        (doom-aiern-modeline-buffer-modification-icon t)

        ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
        (doom-aiern-modeline-unicode-fallback nil)

        ;; Whether display the minor modes in the mode-line.
        (doom-aiern-modeline-minor-modes nil)

        ;; If non-nil, a word count will be added to the selection-info modeline segment.
        (doom-aiern-modeline-enable-word-count nil)

        ;; Major modes in which to display word count continuously.
        ;; Also applies to any derived modes. Respects `doom-aiern-modeline-enable-word-count'.
        ;; If it brings the sluggish issue, disable `doom-aiern-modeline-enable-word-count' or
        ;; remove the modes from `doom-aiern-modeline-continuous-word-count-modes'.
        (doom-aiern-modeline-continuous-word-count-modes '(
            markdown-mode
            gfm-mode
            org-mode
            outline-mode))

        ;; Whether display the buffer encoding.
        (doom-aiern-modeline-buffer-encoding t)

        ;; Whether display the indentation information.
        (doom-aiern-modeline-indent-info nil)

        ;; If non-nil, only display one number for checker information if applicable.
        (doom-aiern-modeline-checker-simple-format t)

        ;; The maximum number displayed for notifications.
        (doom-aiern-modeline-number-limit 99)

        ;; The maximum displayed length of the branch name of version control.
        (doom-aiern-modeline-vcs-max-length 12)

        ;; Whether display the workspace name. Non-nil to display in the mode-line.
        (doom-aiern-modeline-workspace-name t)

        ;; Whether display the perspective name. Non-nil to display in the mode-line.
        (doom-aiern-modeline-persp-name t)

        ;; If non nil the default perspective name is displayed in the mode-line.
        (doom-aiern-modeline-display-default-persp-name nil)

        ;; If non nil the perspective name is displayed alongside a folder icon.
        (doom-aiern-modeline-persp-icon t)

        ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
        (doom-aiern-modeline-lsp t)

        ;; Whether display the GitHub notifications. It requires `ghub' package.
        (doom-aiern-modeline-github nil)

        ;; The interval of checking GitHub.
        (doom-aiern-modeline-github-interval (* 30 60))

        ;; Whether display the modal state icon.
        ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
        ;; From: https://www.reddit.com/r/emacs/comments/gqc9fm/visual_indication_of_the_mode_of_editing_with_evil/frt8trg?utm_source=share&utm_medium=web2x&context=3
        (doom-aiern-modeline-modal-icon nil)

        ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
        (doom-aiern-modeline-mu4e nil)

        ;; Whether display the gnus notifications.
        (doom-aiern-modeline-gnus t)

        ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
        (doom-aiern-modeline-gnus-timer 2)

        ;; Wheter groups should be excludede when gnus automatically being updated.
        (doom-aiern-modeline-gnus-excluded-groups '("dummy.group"))

        ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
        (doom-aiern-modeline-irc t)

        ;; Function to stylize the irc buffer names.
        (doom-aiern-modeline-irc-stylize 'identity)

        ;; Whether display the environment version.
        (doom-aiern-modeline-env-version t)
        ;; Or for individual languages
        (doom-aiern-modeline-env-enable-python t)
        (doom-aiern-modeline-env-enable-ruby t)
        (doom-aiern-modeline-env-enable-perl t)
        (doom-aiern-modeline-env-enable-go t)
        (doom-aiern-modeline-env-enable-elixir t)
        (doom-aiern-modeline-env-enable-rust t)

        ;; Change the executables to use for the language version string
        (doom-aiern-modeline-env-python-executable "python") ; or `python-shell-interpreter'
        (doom-aiern-modeline-env-ruby-executable "ruby")
        (doom-aiern-modeline-env-perl-executable "perl")
        (doom-aiern-modeline-env-go-executable "go")
        (doom-aiern-modeline-env-elixir-executable "iex")
        (doom-aiern-modeline-env-rust-executable "rustc")

        ;; What to dispaly as the version while a new one is being loaded
        (doom-aiern-modeline-env-load-string "...")

        ;; Hooks that run before/after the modeline version string is updated
        (doom-aiern-modeline-before-update-env-hook nil)
        (doom-aiern-modeline-after-update-env-hook nil))
#+end_src

*** evil
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

As mentioned before, both [[https://github.com/emacs-evil/evil][~evil~]] and [[https://github.com/shadowrylander/aiern][~aiern~]] require [[https://github.com/justbur/emacs-bind-map][emacs-bind-map]], by [[https://github.com/justbur][Justin Burkett]]:

#+begin_src emacs-lisp
(meq/up evil :use-package-preconfig (bind-map)
#+end_src

More evil, courtesy of [[https://github.com/mohsenil85/evil-evilified-state][this]] and [[https://github.com/syl20bnr/spacemacs][this]]:

#+begin_src emacs-lisp
    :use-package-postconfig (evil-evilified-state)
#+end_src

Disable the ~evil-escape-key-sequence~, and set the ~evil-undo-system~ to [[https://github.com/emacsmirror/undo-fu][~undo-fu~]]

#+begin_src emacs-lisp
    :gsetq (evil-escape-key-sequence) (evil-undo-system 'undo-fu)
#+end_src

This allows me to disable ~evil-insert-state~:

#+begin_src emacs-lisp
    :leaf (evil :advice
        (:override evil-insert-state (lambda (&rest args) (interactive)
            (meq/disable-all-modal-modes))))
#+end_src

#+begin_src emacs-lisp
    ;; :demon
        ;; TODO
        ;; ((alloy-chord "\"\"") 'evil-ex)
        ;; ((alloy-chord "") 'meq/toggle-evil-ex-cosmoem)
    :config
        ;; From: https://www.reddit.com/r/emacs/comments/lp45zd/help_requested_in_configuring_ryomodal/gp3rfx9?utm_source=share&utm_medium=web2x&context=3
        ;; Kept for documentation porpoises
        ;; (eval
        ;;       `(ryo-modal-keys
        ;;             ("l l" ,(alloy-simulate-key ":wq <RET>") :first '(evil-normal-state) :name "wq")
        ;;             ("l p" ,(alloy-simulate-key ":q <RET>") :first '(evil-normal-state) :name "q")
        ;;             ("l o" ,(alloy-simulate-key ":w <RET>") :first '(evil-normal-state) :name "w")
        ;;             ("l q" ,(alloy-simulate-key ":q! <RET>") :first '(evil-normal-state) :name "q!")))

        ;; Use to get command name:
        ;; Eg: (cdr (assoc "q" evil-ex-commands))
        ;; Then "C-x C-e" (eval-last-sexp)

        ;; TODO: How do I create a keymap `evil-ex-keymap' out of the `evil-ex-commands' alist?

        ;; (cosmoem-def :show-funs #'meq/evil-ex-cosmoem-show
        ;;     :hide-funs #'meq/evil-ex-cosmoem-hide
        ;;     :toggle-funs #'meq/evil-ex-cosmoem-toggle
        ;;     :keymap 'evil-ex-keymap
        ;;     ;; :transient t
        ;; )

        ;; (defun meq/evil-ex-cosmoem-toggle nil (interactive))
        ;; (defun meq/evil-ex-show-top-level nil (interactive)
        ;;     (meq/which-key-show-top-level 'evil-ex-keymap))

        ;; (defun meq/toggle-evil-ex (ua) (interactive "p")
        ;;     (if (= ua 4)
        ;;         (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap nil t)
        ;;         (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap)))
        ;; (defun meq/toggle-evil-ex-cosmoem (ua) (interactive "p")
        ;;     (if (= ua 4)
        ;;         (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap t t)
        ;;         (funcall 'meq/toggle-inner 'evil-mode "evil-ex" (meq/fbatp evil-mode) 'evil-ex-keymap t)))
    )
#+end_src

*** olivetti
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Zen-mode with [[https://github.com/rnkn/olivetti][olivetti]], by [[https://github.com/rnkn][Paul W. Rankin]]:

#+begin_src emacs-lisp
(meq/up olivetti :gsetq (olivetti-body-width 0.60))
#+end_src

*** rainbow-identifiers
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Colorful words with [[https://github.com/Fanael/rainbow-identifiers][rainbow-identifiers]], by [[https://github.com/Fanael][Fanael Linithien]]:

#+begin_src emacs-lisp
(meq/up rainbow-identifiers
    ;; Adapted From:
    ;; Answer: https://stackoverflow.com/a/31253253/10827766
    ;; User: https://stackoverflow.com/users/2698552/chillaranand
    ;; :hook ((buffer-list-update window-configuration-change) . (lambda nil (interactive)
    ;;                                                             (rainbow-identifiers-mode 1)))
    ;; :upnsd-preconfig (xxh)
    )
#+end_src

*** vlf
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

View Large Files with [[https://github.com/m00natic/vlfi][vlfi]], by [[https://github.com/m00natic][Andrey Kotlarski]]

#+begin_src emacs-lisp
(meq/up vlf :gsetq (vlf-application 'always))
#+end_src

# TODO

*** doom-themes
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up doom-themes
    :deino (deino-themes-light (:color blue) nil "A deino for light themes!" ("`" nil "cancel"))
        (deino-themes-dark (:color blue) nil "A deino for dark themes!" ("`" nil "cancel"))
    :sorrow ("t" :deino '(deino-themes nil "t" "A deino for themes!"
                ("s" meq/switch-theme-mode "switch to light / dark")
                ("l" deino-themes-light/body "light themes")
                ("d" deino-themes-dark/body "dark themes")
                ("`" nil "cancel")))
    :gsetq
        (doom-themes-enable-bold t)
        (doom-themes-enable-italic t)
        (meq/var/default-theme-override nil)
        (meq/var/default-default-theme 'dracula-purple-dark)
    :use-package-postconfig
        (doom-themes-ext-neotree :config (doom-themes-neotree-config))
        (doom-themes-ext-org :config (doom-themes-org-config))
    :config
        (unless (meq/which-theme) (cond
            ((member "--purple" command-line-args)
                (delete "--purple" command-line-args)
                (meq/load-theme 'dracula-purple-dark))
            ((member "--orange" command-line-args)
                (delete "--orange" command-line-args)
                (meq/load-theme 'dracula-orange-dark))
            ((member "--red" command-line-args)
                (delete "--red" command-line-args)
                (meq/load-theme 'exo-ui-red-dark))
            ((member "--flamingo" command-line-args)
                (delete "--flamingo" command-line-args)
                (meq/load-theme 'herschel-flamingo-pink-dark))
            ((member "--blue" command-line-args)
                (delete "--blue" command-line-args)
                (meq/load-theme 'st-giles-blue-dark))
            (meq/var/phone (meq/load-theme 'orange-purple-light))
            (meq/var/default-theme-override (meq/load-theme meq/var/default-theme-override))
            (meq/var/current-theme (meq/load-theme meq/var/current-theme))
            ((meq/exwm-p) (meq/load-theme meq/var/default-default-theme))
            (t (meq/load-theme meq/var/default-default-theme))))

        (mapc #'(lambda (theme) (interactive)
            (let* ((name (symbol-name (car theme)))
                    (prefix (symbol-name (cdr theme)))
                    (light (concat name "-light"))
                    (dark (concat name "-dark")))
                (eval `(defdeino+ deino-themes-light nil
                    (,prefix (funcall #'meq/load-theme ',(intern light)) ,light)))
                (eval `(defdeino+ deino-themes-dark nil
                    (,prefix (funcall #'meq/load-theme ',(intern dark)) ,dark)))))
          '((dracula-purple . p)
            (dracula-orange . o)
            (exo-ui-red . r)
            (herschel-flamingo-pink . f)
            (st-giles-blue . b)
            (lio-fotia . l)
            (orange-purple . C-o)
            (flamingo-pink-purple . C-p)
            (ghostfreak-green . g))))
#+end_src

*** windmove
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up windmove
    :config (winner-mode)
    :demon ((alloy-chord "ww") 'deino-wb/body)
    :deino (deino-wb nil nil ("b" deino-buffer/body "buffer") ("w" deino-window/body "window"))
#+end_src

The ~sorrow~ config below is adapted from
[[https://github.com/abo-abo/hydra/wiki/Window-Management#deluxe-window-moving][here]]:

#+begin_src emacs-lisp
    :sorrow ("w" :deino '(deino-window (:columns 5) "w"
        ("`" nil "cancel")
        ("s" deino-buffer/body "buffer" :color blue)
        ("B" balance-windows "balance-windows")
        ("t" toggle-window-spilt "toggle-window-spilt")
        ("H" shrink-window-horizontally "shrink-window-horizontally")
        ("K" shrink-window "shrink-window")
        ("J" enlarge-window "enlarge-window")
        ("L" enlarge-window-horizontally "enlarge-window-horizontally")
        ("R" reverse-windows "reverse-windows")
        ("h" windmove-left "←")
        ("j" windmove-down "↓")
        ("k" windmove-up "↑")
        ("l" windmove-right "→")
        ("q" deino-move-splitter-left "X←")
        ("w" deino-move-splitter-down "X↓")
        ("e" deino-move-splitter-up "X↑")
        ("r" deino-move-splitter-right "X→")
        ("F" follow-mode "Follow")
        ("v" (lambda nil (interactive) (split-window-right) (windmove-right)) "vertical")
        ("x" (lambda nil (interactive) (split-window-below) (windmove-down)) "horizontal")
        ("d" delete-window "delete")
        ("O" delete-other-windows "only this")
        ("z" (progn (winner-undo) (setq this-command 'winner-undo)) "undo")
        ("Z" winner-redo "reset")
        ("o" other-window "other-window"))))
#+end_src

*** ace-window
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up ace-window
    :deino+ (deino-window (:color red)
        ("a" (lambda nil (interactive) (ace-window 1) (add-hook 'ace-window-end-once-hook
                                                                'deino-window/body)) "ace 1")
        ("S" (lambda nil (interactive) (ace-window 4) (add-hook 'ace-window-end-once-hook
                                                                'deino-window/body)) "swap")
        ("D" (lambda nil (interactive) (ace-window 16) (add-hook 'ace-window-end-once-hook
                                                                'deino-window/body)) "Delete Other")
        ("E" ace-swap-window "ace-swap-window")
        ("W" ace-delete-window "ace-delete-window" :exit t)))
#+end_src

*** alamode
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/upnsd alamode)
#+end_src

*** cosmog
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/upnsd cosmog :prime ("c" deino-cosmog/body "cosmog"))
#+end_src

*** helm
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up helm
    ;; :commands (helm-M-x helm-mini helm-mode)
    :deino+ (deino-execute nil
                ("h" helm-smex-major-mode-commands "helm smex major mode")
                ("s" helm-smex "helm smex"))
            (deino-window nil ("B" helm-mini "helm-mini")
                ("f" helm-find-files "helm-find-files"))
    :use-package-postconfig ;; Adapted From: https://github.com/clemera/helm-ido-like-guide
        (helm-smex)
        (helm-flx)
        (helm-swoop)
        (helm-ido-like))
#+end_src

*** magit
:PROPERTIES:
:header-args:emacs-lisp+: :tangle no
:END:

Adapted From: https://github.com/asok/.emacs.d/blob/master/inits/init-hydra.el#L62

#+begin_src emacs-lisp
(meq/up magit :deino (deino-magit (:color blue :columns 8) "g"
  "It's just like magit!"
  ("s" magit-status "status")
  ("c" magit-checkout "checkout")
  ("b" magit-branch-manager "branch manager")
  ("m" magit-merge "merge")
  ("l" magit-log "log")
  ("c" magit-git-command "command")
  ("p" magit-process "process")
  ("`" nil "cancel")))
#+end_src

*** modalka
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up modalka)
#+end_src

*** objed
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up objed)
#+end_src

*** projectile
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Adapted From: https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/

#+begin_src emacs-lisp
(meq/up projectile
    :use-package-preconfig (counsel-projectile :config (counsel-projectile-mode 1)) (helm-projectile)
    ;; Adapted From: https://codeberg.org/dr.ops/medusa/src/branch/main/medusa.org#headline-16
    :deino (deino-projectile-other-window (:color teal) "p o"
        "projectile-other-window"
        ("f"  projectile-find-file-other-window        "file")
        ("g"  projectile-find-file-dwim-other-window   "file dwim")
        ("d"  projectile-find-dir-other-window         "dir")
        ("b"  projectile-switch-to-buffer-other-window "buffer")
        ("`"  nil                                      "cancel" :color blue))
    :sorrow ("p" :deino '(deino-projectile
                (:color teal :columns 4) "p p"
                ("a"   counsel-projectile-ag "counsel-projectile-ag")
                ("g"   counsel-projectile-rg "counsel-projectile-rg")
                ("c"   counsel-projectile "counsel-projectile")
                ("b"   counsel-projectile-switch-to-buffer "switch to buffer")
                ("C"   projectile-invalidate-cache "cache clear")
                ("d"   counsel-projectile-find-dir "find-dir")
                ("f"   counsel-projectile-find-file "find-file")
                ("F"   counsel-projectile-find-file-dwim "find-file-dwim")
                ("C-f" projectile-find-file-in-directory "find-file-in-dir")
                ("G"   ggtags-update-tags "update gtags")
                ("i"   projectile-ibuffer "Ibuffer")
                ("K"   projectile-kill-buffers "kill all buffers")
                ("o"   projectile-multi-occur "multi-occur")
                ("p"   counsel-projectile-switch-project "switch project")
                ("r"   projectile-recentf "recent file")
                ("x"   projectile-remove-known-project "remove known project")
                ("X"   projectile-cleanup-known-projects "cleanup non-existing projects")
                ("z"   projectile-cache-current-file "cache current file")
                ("h"   deino-helm-projectile/body "deino-helm-projectile")
                ("O"   deino-projectile-other-window/body "deino-projectile-other-window")
                ("`"   nil "cancel")))
            ("P" :deino '(deino-helm-projectile
                (:color teal :columns 4) "p h"
                ("h"   helm-projectile "helm-projectile")
                ("c"   helm-projectile-switch-project "switch-project")
                ("f"   helm-projectile-find-file "find-file")
                ("F"   helm-projectile-find-file-dwim "find-file-dwim")
                ("d"   helm-projectile-find-dir "find-dir")
                ("r"   helm-projectile-recentf "recent file")
                ("b"   helm-projectile-switch-to-buffer "switch to buffer")
                ("a"   helm-projectile-ag "helm-projectile-ag")
                ("g"   helm-projectile-rg "helm-projectile-rg")
                ("C-f" helm-projectile-find-file-in-known-projects "find file in known projects")
                ("`"   nil "cancel"))))
#+end_src

*** restart-emacs
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

Cool [[https://github.com/iqbalansari/restart-emacs][package]] by
[[https://github.com/iqbalansari][Iqbal Ansari]]!

#+begin_src emacs-lisp
(meq/up restart-emacs
    :demon ((alloy-chord "aa") 'deino-restart/body)
    :deino (deino-restart (:color blue) "r"
            ("`" nil "cancel")
            ("l" meq/reload-emacs "reload")
            ("s" restart-emacs "restart")))
#+end_src

*** ryo modal
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up ryo-modal :demon ((alloy-chord "KK") 'meq/ryo-execute-with-current-bindings)
    :config ;; From: https://github.com/Kungsgeten/ryo-modal#which-key-integration
        (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

*** vterm
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up vterm :use-package-postconfig (multi-vterm)
    :if (not (member system-type '(windows-nt ms-dos)))
    :demon ((alloy-chord "vv") 'meq/shell)
    :gsetq
        ;; From: https://www.reddit.com/r/emacs/comments/pjtm91/vterm_a_little_bit_slow/hbz40xb?utm_medium=android_app&utm_source=share&context=3
        (vterm-timer-delay 0.01)

        (vterm-always-compile-module t)
        (vterm-shell (meq/ued "vterm-start.sh"))
        (vterm-kill-buffer-on-exit t))
#+end_src

*** xah-fly-keys
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

#+begin_src emacs-lisp
(meq/up xah-fly-keys
    :commands xah-fly-keys
    :sorrow ("m" :deino
                '(modal-modes (:color blue) "m"
                    "A modal deino!"
                    ("`" nil "cancel")
                    ("x" meq/toggle-xah "xah-fly-keys")) :name "modal modes"))
#+end_src

*** Major Modes
:PROPERTIES:
:header-args:emacs-lisp+: :tangle yes
:END:

**** titan

Set up my super major-mode [[https://github.com/shadowrylander/titan][titan]]:

#+begin_src emacs-lisp
(meq/up titan :gsetq (meq/var/titan-snippets-dir (meq/ued-lib "titan" "snippets")))
#+end_src

**** dockerfile-mode

For [[https://github.com/spotify/dockerfile-mode][dockerfile]]:

#+begin_src emacs-lisp
(use-package dockerfile-mode :mode ("\\Dockerfile\\'"))
#+end_src

**** hy-mode

For [[https://github.com/hylang/hy-mode][hy]], plus [[https://github.com/brantou/ob-hy][ob-hy]]:

#+begin_src emacs-lisp
(use-package hy-mode
    :mode ("\\.hy\\'")
    :use-package-preconfig (lispy) (sly)
        (ob-hy :commands (org-babel-execute:hy)))
#+end_src

**** markdown-mode

For [[https://jblevins.org/projects/markdown-mode/][markdown]]:

#+begin_src emacs-lisp
`(use-package markdown-mode :mode ,(meq/titan-append-modes "markdown" "\\.md\\'"))
#+end_src

**** nix-mode

For [[https://github.com/NixOS/nix-mode][nix]], with ~org-babel-execute:nix~ coming from [[https://emacs.stackexchange.com/users/20061/zeta][Zeta's]] answer [[https://emacs.stackexchange.com/a/61442][here]]:

#+begin_src emacs-lisp
(use-package nix-mode
    :commands (org-babel-execute:nix)
    :mode ("\\.nix\\'")
    :init/defun*
        (org-babel-execute:nix (body params)
            "Execute a block of Nix code with org-babel."
            (message "executing Nix source code block")
            (let ((E (cdr (assoc :E params)))
                (in-file (unless E (org-babel-temp-file "n" ".nix")))
                (show-trace (cdr (assoc :show-trace params)))
                (json (cdr (assoc :json params)))
                (xml (cdr (assoc :xml params))))
            (unless E (with-temp-file in-file (insert body)))
            (org-babel-eval
                (format "nix-instantiate --read-write-mode --eval %s %s %s %s"
                    (if show-trace "--show-trace" "")
                    (if json "--json" "")
                    (if xml "--xml" "")
                    (if E (format "-E '%s'" body) (org-babel-process-file-name in-file)))
            ""))))
#+end_src

**** python

#+begin_src emacs-lisp
(use-package ob-python :commands (org-babel-execute:python))
#+end_src

**** shell

#+begin_src emacs-lisp
(use-package ob-shell :commands (org-babel-execute:shell))
#+end_src

**** vimrc-mode

For [[https://github.com/mcandre/vimrc-mode][vimrc]]:

#+begin_src emacs-lisp
(use-package vimrc-mode
    :commands (org-babel-execute:vimrc)
    :mode "\\.vim\\(rc\\)?\\'")
#+end_src

**** xonsh-mode

For [[https://github.com/seanfarley/xonsh-mode][xonsh]], again with ~org-babel-execute:xonsh~ coming from [[https://emacs.stackexchange.com/users/20061/zeta][Zeta's]] answer [[https://emacs.stackexchange.com/a/61442][here]]:

#+begin_src emacs-lisp
(use-package xonsh-mode
    :commands (org-babel-execute:xonsh)
    :mode ("\\.xonshrc\\'" "\\.xsh\\'")
    :init/defun*
        (org-babel-execute:xonsh (body params)
            "Execute a block of Xonsh code with org-babel."
            (message "executing Xonsh source code block")
            (let ((in-file (org-babel-temp-file "x" ".xsh"))
                (opts (or (cdr (assoc :opts params)) nil))
                (args (or (cdr (assoc :args params)) nil)))
            (with-temp-file in-file
                (insert body))
            (org-babel-eval
                (format "xonsh %s %s %s"
                    (if (eq opts nil) "" opts)
                    (if (eq args nil) "" args)
                    (org-babel-process-file-name in-file))
            ""))))
#+end_src

**** doc

Set up documentation super major-mode [[https://github.com/shadowrylander/doc][doc]]:

#+begin_src emacs-lisp
(use-package doc
    :commands (meq/dired-create-doc-markdown meq/dired-create-and-open-doc-markdown)
    :gsetq (meq/var/doc-snippets-dir (meq/ued-lib "doc" "snippets"))
    :uru (doc-org-mode nil deino-doc-org (:color blue :inherit (deino-org-usually/heads)) "t d o"
            ("d" (meq/insert-snippet "org titan template") "template")))
#+end_src

**** fell

Set up novel's super major-mode [[https://github.com/shadowrylander/fell][fell]]:

#+begin_src emacs-lisp
(use-package fell
    :commands (meq/dired-create-fell-markdown meq/dired-create-and-open-fell-markdown)
    :gsetq (meq/var/fell-snippets-dir (meq/ued-lib "fell" "snippets"))
    :uru (fell-org-mode nil deino-fell-org (:color blue :inherit (deino-org-usually/heads)) "t f o"
            ("f" (meq/insert-snippet "org titan template") "template")))
#+end_src

**** org-mode

The one and only [[https://orgmode.org/][org-mode]], with [[https://orgmode.org/worg/org-contrib/][org-contrib]]:
- Here's the [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/][git repo]]
- Here's the [[https://git.sr.ht/~bzg/org-contrib][contrib repo]]

#+begin_src emacs-lisp
`(use-package org
#+end_src

~org-mode~ will activate when any files using the [[https://github.com/shadowrylander/titan][~titan-org~]] super major-mode,
or with the extension ~.org~, are opened:

#+begin_src emacs-lisp
    :mode ,(meq/titan-append-modes "org" '("\\.org\\'" . org-mode))
#+end_src

I use [[https://www.reddit.com/r/emacs/comments/6klewl/comment/djniygy/?utm_source=share&utm_medium=web2x&context=3][this]] to skip over expanding any sub-headers:

#+begin_src emacs-lisp
    :hook (org-cycle . (lambda (state) (interactive) (when (eq state 'children) (setq org-cycle-subtree-status 'subtree))))
#+end_src

#+begin_src emacs-lisp
    :use-package-postconfig (org-contrib)
#+end_src

This sets up [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] by [[https://github.com/kawabata][kawabata]], for exporting files using [[https://pandoc.org/][pandoc]], and my [[https://github.com/shadowrylander/riot][riot]] package, inspired by [[https://github.com/tecosaur][tecosaur's]] package [[https://github.com/tecosaur/org-pandoc-import][org-pandoc-import]];
it essentially converts any files convertable by ~pandoc~ to an ~org~ file upon opening it, and then converts it back to the original format
on saving the file.

#+begin_src emacs-lisp
        (ox-pandoc :upnsd-postconfig (riot :if (not (meq/item-in-cla "--anti-riot")))
            :deino (deino-ob-export-as (:color blue) "o e a"
                    ("`" nil "cancel")
                    ("a" org-pandoc-export-as-asciidoc "asciidoc")
                    ("g" org-pandoc-export-as-gfm "gfm")
                    ("h" org-pandoc-export-as-html5 "html5")
                    ("l" org-pandoc-export-as-latex "latex"))
                (deino-ob-export-to (:color blue) "o e t"
                    ("`" nil "cancel")
                    ("a" org-pandoc-export-to-asciidoc "asciidoc")
                    ("d" org-pandoc-export-to-docx "docx")
                    ("o" org-pandoc-export-to-odt "odt")
                    ("g" org-pandoc-export-to-gfm "gfm")
                    ("h" org-pandoc-export-to-html5 "html5")
                    ("l" org-pandoc-export-to-latex "latex"))
                (deino-ob-export-and-open (:color blue) "o e o"
                    ("`" nil "cancel")
                    ("a" org-pandoc-export-to-asciidoc-and-open "asciidoc")
                    ("g" org-pandoc-export-to-gfm-and-open "gfm")
                    ("h" org-pandoc-export-to-html5-and-open "html5")
                    ("l" org-pandoc-export-to-latex-and-open "latex"))
                (deino-ob-export (:color blue) "o e e"
                    ("`" nil "cancel")
                    ("a" deino-ob-export-as/body "export as")
                    ("t" deino-ob-export-to/body "export to")
                    ("o" deino-ob-export-and-open/body "export and open"))
#+end_src

I have advised the ~org-pandoc-export~ function to allow derived modes of ~org-mode~ as well, to account for my super major-modes, such as [[https://github.com/shadowrylander/titan][~titan~]], [[https://github.com/shadowrylander/fell][~fell~]], [[https://github.com/shadowrylander/doc][~doc~]], etc.

#+begin_src emacs-lisp
            :config/defun* (meq/org-pandoc-export-advice (format a s v b e &optional buf-or-open)
                "General interface for Pandoc Export.
                If BUF-OR-OPEN is nil, output to file.  0, then open the file.
                t means output to buffer."
                (unless (derived-mode-p 'org-mode)
                    (error "You must run this command in org-mode or its derived major modes."))
                (unless (executable-find org-pandoc-command)
                    (error "Pandoc (version 1.12.4 or later) can not be found."))
                (setq org-pandoc-format format)
                (org-export-to-file 'pandoc (org-export-output-file-name
                                            (concat (make-temp-name ".tmp") ".org") s)
                    a s v b e (lambda (f) (org-pandoc-run-to-buffer-or-file f format s buf-or-open))))
            :leaf (ox-pandoc :advice (:override org-pandoc-export meq/org-pandoc-export-advice)))
#+end_src

Set up [[https://github.com/joaotavora/yasnippet][yasnippet]] by [[https://github.com/joaotavora][João Távora]], with the ~deino~ coming from [[https://github.com/abo-abo/hydra/wiki/YASnippet][here]]:

#+begin_src emacs-lisp
        (yasnippet :config (add-to-list 'yas-snippet-dirs (meq/ued "snippets") t)
            :deino (deino-yasnippet (:color blue :hint nil) "y"
                "
                            ^YASnippets^
                --------------------------------------------
                Modes:    Load/Visit:    Actions:

                _g_lobal  _d_irectory    _i_nsert
                _m_inor   _f_ile         _t_ryout
                _e_xtra   _l_ist         _n_ew
                        _a_ll
                "
                ("d" yas-load-directory)
                ("e" yas-activate-extra-mode)
                ("i" yas-insert-snippet)
                ("f" yas-visit-snippet-file :color blue)
                ("n" yas-new-snippet)
                ("t" yas-tryout-snippet)
                ("l" yas-describe-tables)
                ("g" yas/global-mode)
                ("m" yas/minor-mode)
                ("a" yas-reload-all)))
#+end_src

#+begin_src emacs-lisp
    :config (load (meq/ued-settings "org-tangle-functions"))
        ;; (setq auto-mode-alist (append auto-mode-alist (meq/titan-append-modes org ("\\.org\\'" . org-mode))))
    :demon (
        ;; (naked "backtab") 'evil-close-fold
        (alloy-chord "bb") 'org-toggle-link-display)
    :meta (org-mode-map)
    :meta-rename (org-mode-map "ESC" "org-metadir")
    :minoru (org-src-mode deino-edit-spc (:color blue) "o s"
            ("`" nil "cancel")
            ("i" meq/narrow-or-widen-dwim "narrow")
            ("x" org-edit-special "org edit special")
#+end_src

The following commands are from [[https://github.com/bzg/org-mode/blob/main/lisp/org-src.el][this file]]:
- ~org-edit-src-save~ on [[https://github.com/bzg/org-mode/blob/main/lisp/org-src.el#L1222][Line 1222]]
- ~org-edit-src-exit~ on [[https://github.com/bzg/org-mode/blob/main/lisp/org-src.el#L1254][Line 1254]]
- ~org-edit-src-abort~ on [[https://github.com/bzg/org-mode/blob/main/lisp/org-src.el#L1207][Line 1207]]

#+begin_src emacs-lisp
            ("s" org-edit-src-save "save")
            ("e" org-edit-src-exit "exit")
            ("a" org-edit-src-abort "abort"))
#+end_src

#+begin_src emacs-lisp
    :uru (org-mode nil deino-org (:color blue) "o o"
            "A deino for org-mode!"
            ("`" nil "cancel")
            ("t" org-babel-tangle "tangle")
            ("a" meq/org-babel-tangle-append "tangle append")
            ("F" org-babel-tangle-file "tangle file")
            ("n" meq/narrow-or-widen-dwim "narrow")
            ("s" org-edit-special "org edit special")
            ("e" deino-ob-export/body "export"))
    :gsetq
        ;; I'm using ox-pandoc
        ;; (org-export-backends '(md gfm latex odt org))
        (org-directory "/tmp")
        (org-roam-directory org-directory)
        (org-descriptive-links nil)
        (org-startup-folded t)
        (org-src-fontify-natively t)
        ;; (org-src-window-setup 'current-window)
        (org-cycle-emulate-tab 'whitestart)
#+end_src

Upon exiting ~org-src-mode~ I don't want any indentation added to my code blocks, so I use [[https://emacs.stackexchange.com/users/29861/doltes][doltes's]] answer [[https://emacs.stackexchange.com/a/60638/31428][here]]:

#+begin_src emacs-lisp
        (org-edit-src-content-indentation 0))
#+end_src

# ** Load Init

# And finally, load init file:

# #+begin_src emacs-lisp
# ;; (load (meq/ued "init.el"))
# #+end_src