* .envrc

#+begin_src shell :tangle (meq/tangle-path)
use nix
#+end_src

* shell.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; let
    this-flake = import ./.;
    flake = this-flake.inputs.titan or this-flake.inputs.settings.inputs.titan or (if (builtins ? getFlake) then (getFlake github:syvlorg/titan) else (import fetchTarball (let
        lockExists = pathExists ./flake.lock;
        lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.titan.locked.rev = "main"; };
    in {
        url = "https://github.com/syvlorg/titan/archive/${lock.nodes.titan.locked.rev}.tar.gz";
        ${if lockExists then "sha256" else null} = lock.nodes.titan.locked.narHash;
    }) { src = ./.; }).defaultNix);
    inherit (flake.${currentSystem}) pkgs;
in with pkgs; mkShell rec {
    buildInputs = [ titan ];
    nativeBuildInputs = buildInputs;
}
#+end_src

* default.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; if (builtins ? getFlake) then (getFlake (toString ./.)) else (import fetchTarball (let
    lockExists = pathExists ./flake.lock;
    lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.flake-compat.locked.rev = "master"; };
in {
    url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
    ${if lockExists then "sha256" else null} = lock.nodes.flake-compat.locked.narHash;
}) { src = ./.; }).defaultNix
#+end_src

* flake.nix

#+name: 95482c5c-648e-43d2-b810-99033c1843d3
#+begin_src emacs-lisp
(mapconcat
    #'(lambda (pkg) (format "epkg-%s.url = github:syvlorg/%s;" pkg pkg))
    '("aiern"
        "aiern-aiernhide-state"
        "aiern-god-state"
        "cosmoem"
        "cosmog"
        "doc-templates"
        "doom-aiern-modeline"
        "evil-evilified-state"
        "fell-templates"
        "helm-ido-like"
        "leaf-keywords"
        "lode"
        "meta"
        "prime"
        "riot"
        "sorrow"
        "uru"
        "use-package-deino"
        "use-package-extras")
    "\n")
#+end_src

#+begin_src nix :tangle (meq/tangle-path)
{
    nixConfig = {
        # Adapted From: https://github.com/divnix/digga/blob/main/examples/devos/flake.nix#L4
        # extra-substituters = "https://cache.nixos.org/ https://nix-community.cachix.org/";
        trusted-substituters = "https://cache.nixos.org/";
        # extra-trusted-public-keys = "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=";
        trusted-public-keys = "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=";
        # keep-derivations = true;
        # keep-outputs = true;
        extra-experimental-features = "nix-command flakes";
        # accept-flake-config = true;
        # show-trace = true;
        # fallback = true;
        # auto-optimise-store = true;
        # builders-use-substitutes = true;
        # cores = 0;
        # flake-registry = https://raw.githubusercontent.com/sylvorg/settings/main/flake-registry.json;
        # allow-unsafe-native-code-during-evaluation = true;
        # min-free = 262144000;
        # max-free = 1073741824;
    };
    description = "My emacs config!";
    inputs = rec {
        settings.url = github:sylvorg/settings;
        titan.follows = "settings/titan";
        nixpkgs.follows = "settings/nixpkgs";

        <<95482c5c-648e-43d2-b810-99033c1843d3()>>

        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; settings.mkOutputs {
        inherit inputs;
        type = "general";
        pname = "damascus";
        overlays = let
            damascan = j.foldToSet (map (pkg: let
                pname = "damascus" + (removePrefix "emacs" pkg);
            in genAttrs [
                pname
                pkg
            ] (name: final: prev: { ${pname} = final.${pkg}.withPackages (epkgs: with epkgs; flatten [
                auto-compile
                command-log-mode
                company-prescient
                counsel-projectile
                dired-plus
                dired-sidebar
                dmenu
                doom-themes
                evil-god-state
                exec-path-from-shell
                exwm
                helm-projectile
                helm-smex
                helm-swoop
                help-fns-plus
                hy-mode
                gcmh
                general
                helm
                helm-flx
                ivy
                ivy-prescient
                lispy
                magit
                modalka
                no-littering
                ob-hy
                objed
                olivetti
                org-contrib
                ox-pandoc
                pyvenv
                rainbow-identifiers
                rainbow-mode
                restart-emacs
                ryo-modal
                selectrum-prescient
                sly
                use-package-chords
                undo-fu
                undo-fu-session
                vlfi
                xah-fly-keys
                (map (epkg: let epkg' = epkgs.${removePrefix "epkg-" epkg}; in [ epkg' epkg'.propagatedUserEnvPkgs ]) (filter (hasPrefix "epkg-") (attrNames inputs)))
            ]); })) (let
                prev = inputs.nixpkgs.legacyPackages.x86_64-linux;
            in j.emacsenGen prev (settings.inputs.emacs.overlay prev prev)));
        in j.foldToSet [
            damascan
            { default = damascan.emacs-nox; }
        ];
    };
}
#+end_src
